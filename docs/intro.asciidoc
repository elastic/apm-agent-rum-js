[[intro]]
== Introduction

Welcome to the APM Real User Monitoring (RUM) JavaScript Agent documentation.

The Elastic APM RUM JavaScript agent sends performance metrics and errors to the APM Server.

NOTE: The APM JavaScript agent is compatible with APM Server v6.5+.

[float]
[[additional-components]]
=== Additional Components

APM Agents work in conjunction with the {apm-server-ref-v}/index.html[APM Server], {ref}/index.html[Elasticsearch], and {kibana-ref}/index.html[Kibana].
Please view the {apm-overview-ref-v}/index.html[APM Overview] for details on how these components work together.

You will also need to {apm-server-ref-v}/rum.html[enable frontend endpoints in the `apm-server` configuration].

[[getting-started]]
== Getting started

* <<using-package-managers>>
* <<using-script-tags>>
* <<configuring-cors>>

[float]
[[using-package-managers]]
=== Using Package Managers

Install the APM agent for JavaScript as a dependency to your application:

[source,bash]
----
npm install @elastic/apm-rum --save
----

Configure the agent:

[source,js]
----
import { init as initApm } from '@elastic/apm-rum'
const apm = initApm({
  
  // Set required service name (allowed characters: a-z, A-Z, 0-9, -, _, and space)
  serviceName: '',

  // Set custom APM Server URL (default: http://localhost:8200)
  serverUrl: 'http://localhost:8200',
  
  // Set service version (required for sourcemap feature)
  serviceVersion: ''
})
----

[float]
[[using-script-tags]]
=== Using Script Tags

Add a <script> tag to the HTML page and use the `elasticApm` global object to load and initialize the agent:

NOTE: Please download the latest version of JavaScript agent from https://github.com/elastic/apm-agent-rum-js/releases/latest[GitHub] or
https://unpkg.com/@elastic/apm-rum/dist/bundles/elastic-apm-rum.umd.min.js[UNPKG] and host the file in your Server/CDN before deploying to production.

[source,html]
----
<script src="https://your-cdn-host.com/path/to/elastic-apm-rum.umd.min.js" crossorigin></script>
<script>
  elasticApm.init({
    serviceName: '',
    serverUrl: 'http://localhost:8200',
  })
</script>
----

NOTE: Currently our minified JavaScript bundle is about 16KB (gzipped).

[float]
[[configuring-cors]]
=== Configuring CORS

If APM Server is deployed in an origin different than the page's origin,
you will need to configure Cross-Origin Resource Sharing (CORS).
To configure CORS, simply:

1. {apm-server-ref-v}/configuration-rum.html[Enable RUM support] in APM Server.
2. Adjust the {apm-server-ref-v}/configuration-rum.html#_literal_allow_origins_literal[`apm-server.rum.allow_origins`] configuration.
By default, APM Server allows all origins.

[float]
==== How CORS works

When the RUM agent makes it's initial `POST` request, the browser will check to see if it is a cross-origin request.
If it is, the browser automatically makes a preflight `OPTIONS` request to the server to ensure the original `POST` request is allowed.
If this `OPTIONS` check passes, then the original `POST` request is allowed.
This request will fail if RUM support is not configured in the APM Server.

If you use a proxy, the preflight request headers may be necessary for your configuration:

[source,js]
----
Access-Control-Request-Headers: Content-Type
Access-Control-Request-Method: POST
Origin: [request-origin]
----

The response should include these headers:

[source,js]
----
Access-Control-Allow-Headers: Content-Type
Access-Control-Allow-Methods: POST, OPTIONS
Access-Control-Allow-Origin: [request-origin]
----

TIP: To learn more about CORS, see the MDN page on
https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS[Cross-Origin Resource Sharing].
