[[advanced-topics]]
== Advanced Topics

* <<longtasks>>
* <<typescript>>
* <<custom-transaction-name, Initial Page load transaction names>>
* <<custom-transactions, Custom Transactions>>

[[longtasks]]
=== How to interpret long task spans in the UI

Long tasks is a new performance metric that can be used for measuring the
responsiveness of an application and helps developers to understand the bad user
experience. It enables detecting tasks that monopolize the UI thread for
extended periods (greater than 50 milliseconds) and block other
critical tasks from being executed as stated in the https://github.com/w3c/longtasks[official spec].

RUM agent automatically captures these Long tasks and include them as spans as
part of the transaction. Since long tasks currently does not have the full information on
which part of code cause slowness, it would be hard to interpret these spans.
Below you can find some tips to help with interpreting long task spans:

* The name of the long task span, e.g.: `self`, `same-origin`, etc., implies the
  origin of the task. It could be the current browsing context or inside iframes.

* Context of the span is enriched with useful information like `attribution`
  (the type of work, such as script, layout, etc), `type`, `id` and `name`, which
  determines the culprit container (such as window, iframe, embed or object)
  responsible for the long task.

With the help of the transaction timeline and span timings,
one could dig deeper by marking slow application code with the
https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark[User Timing API].
When these spans are then captured by the agent again, you could combine them
with long tasks to reveal the true source code location.

[[typescript]]
=== Using with TypeScript

RUM agent publishes the type definitions for the `@elastic/apm-rum` package via `types` property in `package.json`.
If you are importing the package on a TypeScript codebase, you will get automatic code completion, hover info
and method signature information on supported platforms (Visual Studio Code, etc)

[[custom-transaction-name]]
=== Custom page load transaction names

A common pattern to name the transactions would be to use the current URL (`window.location.href`).
However, it creates too many unique transactions (blog titles, query strings, etc.)
and would be less useful when visualizing the traces in Kibana APM UI.

To overcome this problem, the agent groups the page load transactions based on the current URL.
Let's look at the below example

[source,text]
----
// Blog Posts - '/blog/:id'
https://www.elastic.co/blog/reflections-on-three-years-in-the-elastic-public-sector
https://www.elastic.co/blog/say-heya-to-the-elastic-search-awards
https://www.elastic.co/blog/and-the-winner-of-the-elasticon-2018-training-subscription-drawing-is

// Documentation - '/guide/en/*'
https://www.elastic.co/guide/en/elastic-stack/current/index.html
https://www.elastic.co/guide/en/apm/get-started/current/index.html
https://www.elastic.co/guide/en/infrastructure/guide/current/index.html
----

The page load transaction names for the above URL's would be inferred automatically and categorized
as `/blog/:id` and `/guide/en/*` by the agent. The grouping logic in the agent works by recursively traversing the
URL path tree until the depth of 2 and converting them to wildcard or slugged matches based on the number of digits, special characters,
the mix of upper and lowercase characters in the path. The algorithm uses heuristics that are derived from common patterns in URL's and therefore, it might not correctly identify matches in some cases.

If the inferred transaction names are not helpful, please set <<page-load-transaction-name,`pageLoadTransactionName`>> configuration to something
meaningful that groups transactions under the same categories (blog, guide, etc.) and avoid using the full URL at all costs.

[source,js]
----
import {apm} from '@elastic/apm-rum'

apm.init({
    serviceName: "service-name",
    pageLoadTransactionName: '/homepage'
})
----

include::./custom-transactions.asciidoc[Custom Transactions]
