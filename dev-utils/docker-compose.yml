version: "2.1"
services:
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION:-8.6.1}
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "discovery.type=single-node"
      - "xpack.security.authc.anonymous.roles=remote_monitoring_collector"
      - "xpack.security.authc.realms.file.file1.order=0"
      - "xpack.security.authc.realms.native.native1.order=1"
      - "xpack.security.enabled=true"
      - "xpack.license.self_generated.type=trial"
      - "xpack.security.authc.token.enabled=true"
      - "xpack.security.authc.api_key.enabled=true"
      - "logger.org.elasticsearch=${ES_LOG_LEVEL:-error}"
      - "action.destructive_requires_name=false"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 2000m
#    cpus: 0.5
    logging:
      driver: 'json-file'
      options:
          max-size: '2m'
          max-file: '5'
    ports:
      - "127.0.0.1:${ELASTICSEARCH_PORT:-9200}:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      retries: 10
      interval: 20s
    volumes:
        - "./elasticsearch/roles.yml:/usr/share/elasticsearch/config/roles.yml"
        - "./elasticsearch/users:/usr/share/elasticsearch/config/users"
        - "./elasticsearch/users_roles:/usr/share/elasticsearch/config/users_roles"
        - "./elasticsearch/service_tokens:/usr/share/elasticsearch/config/service_tokens"
    networks:
      apm:
        aliases:
          - elasticsearch

  fleet-server:
    container_name: apm-server
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION:-8.6.1}
    entrypoint: "/bin/bash"
    command:
        - "-l"
        - "-c"
        - "export && elastic-agent container -d *"
    ports:
        - "8220:8220"
        - "8200:8200"
    healthcheck:
        test: ["CMD-SHELL", "curl -s -k http://localhost:8220/api/status | grep -q 'HEALTHY'"]
        retries: 300
        interval: 1s
    environment:
        FLEET_ELASTICSEARCH_HOST: "http://elasticsearch:9200"
        FLEET_SERVER_ENABLE: "1"
        FLEET_SERVER_HOST: "0.0.0.0"
        FLEET_SERVER_POLICY_ID: "${FLEET_SERVER_POLICY_ID:-fleet-server-apm-policy}"
        FLEET_SERVER_PORT: "8220"
        KIBANA_FLEET_HOST: "http://kibana:5601"
        KIBANA_FLEET_SETUP: "1"
        FLEET_SERVER_INSECURE_HTTP: "1"
        FLEET_SERVER_ELASTICSEARCH_INSECURE: "1"
        FLEET_SERVER_SERVICE_TOKEN: AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL2VsYXN0aWMtcGFja2FnZS1mbGVldC1zZXJ2ZXItdG9rZW46bmgtcFhoQzRRQ2FXbms2U0JySGlWQQ
        KIBANA_FLEET_SERVICE_TOKEN: AAEAAWVsYXN0aWMvZmxlZXQtc2VydmVyL2VsYXN0aWMtcGFja2FnZS1mbGVldC1zZXJ2ZXItdG9rZW46bmgtcFhoQzRRQ2FXbms2U0JySGlWQQ
    depends_on:
        elasticsearch: {condition: service_healthy}
        kibana: {condition: service_healthy}
    networks:
      apm:
        aliases:
          - fleet-server

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION:-8.6.1}
    environment:
        ELASTICSEARCH_HOSTS: http://elasticsearch:9200
        ELASTICSEARCH_USERNAME: "${KIBANA_ES_USER:-kibana_system_user}"
        ELASTICSEARCH_PASSWORD: "${KIBANA_ES_PASS:-changeme}"
        STATUS_ALLOWANONYMOUS: 'true'
    ports:
      - "127.0.0.1:${KIBANA_PORT:-5601}:5601"
    logging:
      driver: 'json-file'
      options:
          max-size: '2m'
          max-file: '5'
    healthcheck:
      test: ["CMD", "curl", "--write-out", "'HTTP %{http_code}'", "--silent", "--output", "/dev/null", "http://kibana:5601/"]
      retries: 10
      interval: 10s
    volumes:
        - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
    mem_limit: 2000m
#    cpus: 0.5
    depends_on:
      elasticsearch:
        condition: service_healthy
    labels:
      - "co.elatic.apm.stack-version=${STACK_VERSION}"
    networks:
      apm:
        aliases:
          - kibana

  wait-for-apm-server:
    container_name: wait-for-apm-server
    image: alpine
    command: >
      /bin/sh -c exit 0
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "exit 0"]
      retries: 10
      interval: 10s
    depends_on:
      fleet-server:
        condition: service_healthy
    networks:
      apm:
        aliases:
          - wait-for-apm-server

  node-puppeteer:
    build:
      context: ../.ci/docker/node-puppeteer
      args:
        - NODEJS_VERSION=${NODEJS_VERSION}
    container_name: node-puppeteer
    image: docker.elastic.co/observability-ci/node-puppeteer:${NODEJS_VERSION}
    environment:
      - HOME=/app
      - SCOPE=${SCOPE}
      - STACK_VERSION=${STACK_VERSION}
      - APM_SERVER_URL=${APM_SERVER_URL}
      - KIBANA_URL=${KIBANA_URL}
      - BUILD_NUMBER=${BUILD_NUMBER}
      - BRANCH_NAME=${BRANCH_NAME}
      - CI=${CI}
      - SAUCE_USERNAME=${SAUCE_USERNAME}
      - SAUCE_ACCESS_KEY=${SAUCE_ACCESS_KEY}
      - MODE=${MODE}
      - GOAL=${GOAL}
      - WORKSPACE=${WORKSPACE}
      - BASE_DIR=${BASE_DIR}
    command: /run-test.sh
    mem_limit: 2000m
#    cpus: 0.5
    depends_on:
      fleet-server:
        condition: service_healthy
    volumes:
      - ..:/app
    networks:
      apm:
        aliases:
          - node-puppeteer
    user: ${USER_ID}

  node-benchmark:
    build:
      context: ../.ci/docker/node-playwright
      args:
        - NODEJS_VERSION=${NODEJS_VERSION}
    container_name: node-playwright
    image: docker.elastic.co/observability-ci/node-playwright:${NODEJS_VERSION}
    environment:
      - HOME=/app
      - BUILD_NUMBER=${BUILD_NUMBER}
      - BRANCH_NAME=${BRANCH_NAME}
      - CI=${CI}
      - REPORT_FILE=${REPORT_FILE}
    command: >
      /bin/bash -c "set -x
        id
        node --version
        npm --version
        npx --version
        cd /app
        export
        npm install
        npm install playwright@1.18.1 --unsafe-perm=true --allow-root
        set -eo pipefail
        npx lerna run build:module
        node ./scripts/benchmarks.js ${REPORT_FILE}"
    mem_limit: 2000m
    volumes:
      - ..:/app
    networks:
      apm:
        aliases:
          - node-benchmark
    user: ${USER_ID}

  load-testing:
    build:
      context: ../.ci/docker/node-playwright
      args:
        - NODEJS_VERSION=${NODEJS_VERSION}
    container_name: node-playwright
    image: docker.elastic.co/observability-ci/node-playwright:${NODEJS_VERSION}
    environment:
      - HOME=/app
      - BUILD_NUMBER=${BUILD_NUMBER}
      - BRANCH_NAME=${BRANCH_NAME}
      - CI=${CI}
      - REPORT_FILE=${REPORT_FILE}
      - APM_SERVER_URL=http://apm-server:8200
    command: >
      /bin/bash -c "set -x
        id
        node --version
        npm --version
        npx --version
        cd /app
        export
        npm install
        set -eo pipefail
        npx lerna run build:main
        node ./scripts/apm-server-load-test.js ${REPORT_FILE}"
    mem_limit: 2000m
    volumes:
      - ..:/app
    networks:
      apm:
        aliases:
          - load-testing
    user: ${USER_ID}
    depends_on:
      elasticsearch:
        condition: service_healthy
      fleet-server:
        condition: service_healthy

networks:
  apm:
